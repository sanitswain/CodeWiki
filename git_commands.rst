Git commands for existing project
----------------------------------
- git init
- git add .
- git commit -m "message"
- git commit -a -m "message"  => This is same as add + commit. -a option won't work with newly created files or un-tracked files
- git remote add origin <remote repository URL>
- git remote -v
- git push -u origin master
- git remote rm origin


Git Config
-----------
Configurations are stored in 3 different files; *local, global, system*.

- Local= per repo (myrepo\.git\config)
- Global=per OS user and all repos. (C:\Users\Sanit\.gitconfig)
- System= system wide setting for all users and all repos. (C:\ProgramData\Git\config)

Like SVN, **.git** folder won't be created in every sub folder. We can also create .git folder outside of the project root if we set GIT_DIR environment variable or passing "--separate-git-dir=/apps/repo" option.

.. list-table:: 
   :widths: 40 60
   :header-rows: 1

   * - Command
     - Description
   * - git config --global user.email a@b.com
     - Setting user email
   * - git config --local user.name sanit
     - setting username for local repo
   * - git config --system user.name sanitswain
     - setting username for all repos
   * - git config user.email
     - Returns the email if already configured
   * - git config --global merge.tool kdiff3
     -
   * - git config --local alias.sts status
     - creates an alias "sts" for git status.
   * - git init --bare --shared  myrepo.git
     - Creating central bare repo
   * - git init newdirectory --template=<template_directory>
     - Templates allow you to initialize a new repository with a predefined .git subdirectory
   * - git config diff.color.commit green
     - updating color of commit id for git log output


Git branching
--------------

.. list-table:: 
   :widths: 30 50
   :header-rows: 1

   * - Command
     - Description
   * - git branch / git branch --list
     - Shows all branches in your local repo
   * - git branch -a
     - Shows all local and remote branches
   * - git branch -r
     - Shows only remote branches
   * - git branch mybranch
     - Creates a new branch
   * - git branch newbranch master
     - creates branch from an existing branch
   * - git branch -m newbranchname
     - Renames a given branch
   * - git branch -d mybranch
     - Safe way to delete given branch. It prevent you to delete if any unmerged changes available in your local
   * - git branch -D mybranch
     - Force delete even if unmerged changes exist. Using this will throw away all your commits associated with the branch.
   * - git push origin --delete mybranch
     - Deletes branch from remote
   * - git push origin :mybranch
     - Alternate to "--delete mybranch"
   * - git fetch --all
     - Fetches contents from remote. If any changes done to remote like adding/deleting branch etc, fetch operation will pull all this information from remote


Git stash
----------
- .git\refs\stash => Points to most recently created stash
- .git\logs\refs  => previously created stashes

By default git stash won't stash newly added files or ignored files.

- -u (--include-untracked) =>To include newly added files
- -a (--all)  => To include newly added files as well as ignored files

.. list-table:: 
   :widths: 30 50
   :header-rows: 1

   * - Command
     - Description
   * - git stash save "my message"
     - 
   * - git stash push "my message"
     - 
   * - git stash push
     - creates a new stash save with autogenerated message
   * - git stash list
     - 
   * - git stash show stash@{2}
     - 
   * - git stash apply stash@{2}
     - Applies a specific stash changes. When we will do stash list, git will show stash save aliases like "stash@{2}"
   * - git stash pop stash@{1}
     - 
   * - git stash drop stash@{2}
     - Drops a saved stash
   * - git stash clear
     - 
   * - git stash pop
     - 
   * - git reset --hard HEAD
     - Revert all ur changes to HEAD
   * - git clean -f -d  -x
     - Removes untracked files , directories and ignored files
   * - git clean -qfdx
     - Cleans everything silently
   * - git stash branch <branch_name> stash@{2}
     - Pops out a given stash and creates branch out of it.
   * - git log --oneline --graph stash@{1}
     - 


Git Ignore
----------

.. list-table:: 
   :widths: 30 50
   :header-rows: 1

   * - Command
     - Description
   * - repo_root/.gitignore
     - Shared files contains patterns to ignore files at repo level
   * - .git/info/exclude
     - Personal git ignore rules at repo level
   * - git config --global core.excludesFile ~/.gitignore
     - Global git ignore rules. You need to manually create this .gitignore file.
   * - git add -f/--force debug.log
     - Commiting ignored files
   * - git check-ignore -v/--verbose debug.log
     - To identify the pattern that causing a particular file to be ignored


Inspeting Git
-------------

.. list-table:: 
   :widths: 30 50
   :header-rows: 1

   * - Command
     - Description
   * - git status
     - Shows current branch, change set and stage and unstaged files
   * - git log
     - Displays commit history
   * - git log -5
     - Shows last 5 commits history
   * - git log --oneline
     - Condense each commit to a single line. This is useful for getting a high-level overview of the project history. It will show partial commit SHA id.
   * - git log --stat
     - Shows which files were altered and number lines adde/deleted etc
   * - git log -p
     - Shows full diff of each commit
   * - git log --decorate
     - Shows which branch/tag the commit belongs to. It is usually used with --oneline.
   * - git log --graph
     - Draws an ASCII graph representing the branch structure of the commit history. This is commonly used with the --oneline and --decorate.
   * - git log --pretty=oneline
     - Shows logs in one line with full commit SHA id. In "git log --oneline" only partial commit id will be shown.	
   * - git log --graph --decorate --oneline
     - --decorate adds the names of branches or tags of the commits that are shown
   * - git log --oneline --graph stash@{1}
     - 	
   * - 3157e~1
     - Refers to the commit before 3157e
   * - git log --oneline master..myfeature
     - Comparing branches
   * - git shortlog
     - Shows all commits grouped and sorted by author name means it identifies who committed what to get the statistics.
   * - git shortlog -n
     - Shows commits sorted by author name	 

**Git log custom formatting**: Formatting log with print-f style placeholder to display custom log

1. git log --pretty=format:"<custom format>"
2. git log --pretty=format:"%cn committed %h on %cd"
   
   cn=Committer Name, %h=hash/commit id, %cd=Commit Date. Output: "sanitswain committed 263a42f on Mon Nov 20 09:53:13 2017 +05"


**Git log filtering**

.. list-table:: 
   :widths: 30 50
   :header-rows: 1

   * - Command
     - Description
   * - git log --after="2014-7-1"
     - shows commits created after July 1st, 2014 (inclusive)
   * - git log --after="yesterday"
     - 
   * - git log --after="1 week ago"
     - 
   * - git log --after="2014-7-1" --before="2014-7-4"
     - Log between two dates
   * - git log --author="<pattern>"
     - Shows commit by particular author
   * - git log --grep="JRA-224:"
     - Search for commits with a commit message pattern
   * - git log --grep="JRA-224:" -i
     - Search for commits with a commit message pattern of ignore case
   * - git log <since>..<until>
     - Shows logs between two commits. Ex: git log 3157e..5ab91
   * - git log --author="John\|Mary"
     - commits by Marry or John
   * - git log -- foo.py bar.py
     - To see history of particular file. The -- parameter is used to tell git log that subsequent arguments are file paths and not branch names. If there?s no chance of mixing it up with a branch, you can omit the --
   * - git log -S"Hello, World!"
     - search by content for example; search for commits that introduce or remove a particular line of source code.
   * - git log -G"<regex>"
     - search by regex pattern
   * - git log master..feature
     - Changes done in feature after forking from master
   * - git log --no-merges
     - Not to display merge commits
   * - git log --merges
     - Only display merge commits	 


Git reflog
-----------

.. list-table:: 
   :widths: 30 50
   :header-rows: 1

   * - Command
     - Description
   * - git reflog / git reflog show HEAD
     - 
   * - git reflog ---all
     - 
   * - git reflog <branch_name>
     - 
   * - git reflog stash
     - reflog if anything available in stash
   * - git diff stash@{0} otherbranch@{0}
     - to see difference
   * - git diff master@{0} master@{1.day.ago}
     - to supply time qualifier in reflog
   * - git reflog --relative-date
     - shows when updates are done; (Ex: 2 hours ago)
   * - git reflog expire
     - cleans up old or unreachable reflog entries
   * - git reflog expire -n/--dry-run
     - dry-run or pre validation for reflog expire
   * - git reflog expire --expire=30
     - Override default 90 days reflog expiration date to given time
   * - git config gc.reflogExpire 30
     - Git configuration to set reflog expiry days
   * - git reflog delete
     - Delete all ref logs


Git Checkout
------------
- git checkout branch/commit
- git checkout <commit> <file>
- git checkout -b feature_branch master  => creates branch from master and switches to newly created branch


Git reset vs revert
-------------------
**Reset** is the way to move your tip of the branch to a different commit or remove commits from current branch. It accepts three options; hard, soft, mixed.

.. list-table:: 
   :widths: 30 50
   :header-rows: 1

   * - Command
     - Description
   * - git reset --hard HEAD
     - Unstage files and also clears your local changes. It is generally used to throw away all your uncommitted changes
   * - git reset --soft HEAD
     - Neither unstage files nor remove local changes but just move the tip of the branch
   * - git reset --mixed HEAD
     - Unstage the files but keep local changes. It is defult case.
   * - git reset <file>
     - Remove the specified file from the staging area, but your local changes will still be there.
   * - git checkout HEAD <file>
     - Removes your local changes.
   * - git reset HEAD~2 abc.py
     - unstages and reset the abc.py file to second last commit.

**Reverting** undoes a commit by creating a new commit. This is a safe way to undo changes, as it has no chance of re-writing the commit history. Contrast this with git reset, which does alter the existing commit history. For this reason, git revert should be used to undo changes on a public branch, and git reset should be reserved for undoing changes on a private branch. Revert will remove changes from a particular commit and then commit it again as new changes so that history will be maintained but reset clears of everything starting from given commit to later so clears of public history.

- git revert <commit>/HEAD~2 => *removes the changes done in grand parent and commit it with new commit*


Git clean
---------
Git CLEAN removes all untracked files.

.. list-table:: 
   :widths: 30 50
   :header-rows: 1

   * - Command
     - Description
   * - git clean
     - removes untracked files except ignored files
   * - git clean -n
     - Does dry- run without deleting anything, it shows the files to be deleted when clean will be executed.
   * - git clean -f
     - force clean if clean.requireForce value is false
   * - git clean -f <path>
     - Remove the specified file from the staging area, but your local changes will still be there.
   * - git clean -df
     - force cleans both directory and files
   * - git clean -xf
     - force clean everything along with ignored files


Git commit
----------
- git commit --amend  => Amend the staged files to last commit
- git commit --amend -m "new message"  => To rectify last committed message
- git commit --amend --no-edit  => amend with out changing last commit message


Git merge conflict resolution
-----------------------------

- git merge feature  => merges the changes from feature to current branch
- git merge feature master => merges changes from feature into master
- git pull --rebase origin master  => If conflict happened then pull remote changes and rebase your local changes on top of master

On rebasing process local changes will be applied to pulled remote changes commit-by-commit manner. Rebase will stop on the commit having issue. We need to resolve commits manually and add them to staging area and continue rebasing.

- git add <conficted_file>
- git rebase --continue
- git rebase --abort  => On any issue with rebasing if yo want to move to the place where you started

Git Hooks
----------

- git rev-parse --verify HEAD  => Returns the commit SHA id associated with HEAD. It is used to detect whether this is initial commit or already some commits are done.
- git diff-index --check --cached HEAD  => compares a commit against the index. --check option warn us if the changes introduces whitespace errors.
- git symbolic-ref --short HEAD => returns the branch name associated to HEAD. Removing --short returns the full branch path like 'refs/head/mybranch'


Git credential
--------------

.. list-table:: 
   :widths: 30 50
   :header-rows: 1

   * - Command
     - Description
   * - git config --global credential.helper wincred
     - clears credential. While interacting to remote (pushing/pulling code etc) next time, windows will prompt for credential.
     

Git other commands
------------------
Git CLEAN removes all untracked files.

.. list-table:: 
   :widths: 30 50
   :header-rows: 1

   * - Command
     - Description
   * - git clone https://github.com/sanitswain/learngit.git learngit
     - 
   * - git clone -branch <branch/tagname> <clone-url>
     - Cloning a particuar branch
   * - git clone -depth=1 <clone_url>
     - Shallow cloning, only clones the last commit history. An extensive commit history may cause problems such as disk space usage limits and long wait times when cloning.
   * - Updating remote url
     - git remote set-url origin https://github.com/username/newrepo.git
   * - git clone --bare <clone_url> myrepo
     - Only history and other info will be cloned. No code will be downloaded.
   * - git pull --rebase origin master
     - 
   * - git push --force origin master
     - Even if remote master branch will conflict it will force push your changes
   * - git merge --abort
     - To revert merge if merge conflict corrupted the repo
   * - git rebase master
     - Rebase your local commits on top of master
   * - git rebase -i HEAD~3
     - Rebase your local commits on top of last few commits. This option can be used to rewrite last few commits


git merge (Scout pattern)
-------------------------
Create a temporary branch and test your merge status. If merge gone well then merge the temporary branch with master and delete temporary branch at the end.
Currently you are in master.

- git checkout -b test_merge
- git merge branchname
- git checkout master
- git merge test_merge
- git branch -d test_merge

git merge (Savepoint pattern)
-----------------------------
Create a savepoint branch from master that will referenced as a backup copy where you can reset your master to savepoint branch if anything goes wrong with master while merging.
Currently you are in master

- git branch -b savepoint
- git merge branchname
- git branch -d savepoint  => Delete temp branch if mege succeded
- git reset --hard savepoint  => reset master to savepoint if merge failed
